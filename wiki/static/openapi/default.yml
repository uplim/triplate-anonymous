openapi: 3.0.3
info:
  title: Swagger TRIPLATE - OpenAPI 3.0
  description: |-
    TRIPLATEのAPI設計仕様書です．
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://localhost:3001/api
tags:
  - name: ユーザ
    description: ユーザに関するAPI
  - name: たび
    description: たびに関するAPI
  - name: テンプレート
    description: テンプレートに関するAPI
  - name: タグ
    description: タグに関するAPI
  - name: みんなのたび
    description: みんなのたびに関するAPI
paths:
  /me:
    get:
      tags:
        - ユーザ
      summary: 現在のユーザ情報を取得する
      description: Update an existing pet by Id
      operationId: getMe
      responses:
        "200":
          description: Success to get me
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Me"
        "400":
          description: Invalid ID supplied
        "404":
          description: User not found
        "422":
          description: Validation exception
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /register:
    post:
      tags:
        - ユーザ
      summary: ユーザの登録
      description: Update an existing pet by Id
      operationId: registerUser
      requestBody:
        description: Update an existent pet in the store
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Pet"
          application/xml:
            schema:
              $ref: "#/components/schemas/Pet"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Pet"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pet"
            application/xml:
              schema:
                $ref: "#/components/schemas/Pet"
        "400":
          description: Invalid ID supplied
        "404":
          description: Pet not found
        "422":
          description: Validation exception
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /login:
    post:
      tags:
        - ユーザ
      summary: ユーザのログイン
      description: Update an existing pet by Id
      operationId: loginUser
      requestBody:
        description: Update an existent pet in the store
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Pet"
          application/xml:
            schema:
              $ref: "#/components/schemas/Pet"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Pet"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pet"
            application/xml:
              schema:
                $ref: "#/components/schemas/Pet"
        "400":
          description: Invalid ID supplied
        "404":
          description: Pet not found
        "422":
          description: Validation exception
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /logout:
    post:
      tags:
        - ユーザ
      summary: ユーザのログアウト
      description: Update an existing pet by Id
      operationId: logoutUser
      requestBody:
        description: Update an existent pet in the store
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Pet"
          application/xml:
            schema:
              $ref: "#/components/schemas/Pet"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Pet"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pet"
            application/xml:
              schema:
                $ref: "#/components/schemas/Pet"
        "400":
          description: Invalid ID supplied
        "404":
          description: Pet not found
        "422":
          description: Validation exception
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /users/{id}:
    get:
      tags:
        - ユーザ
      summary: ユーザの詳細情報を返す
      description: Returns a single pet
      operationId: getUser
      parameters:
        - name: id
          in: path
          description: ユーザid
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid ID supplied
        "404":
          description: Pet not found
      security:
        - api_key: []
        - petstore_auth:
            - write:pets
            - read:pets
    post:
      tags:
        - ユーザ
      summary: ユーザの詳細情報を作成する
      description: ""
      operationId: createUser
      parameters:
        - name: id
          in: path
          description: ユーザid
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: success
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  example: Taro
                imageUrl:
                  type: string
                  example: https://XXXX
      responses:
        "400":
          description: Invalid input
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    put:
      tags:
        - ユーザ
      summary: ユーザの詳細情報を更新する
      description: ""
      operationId: updateUser
      parameters:
        - name: id
          in: path
          description: ユーザid
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: success
        content:
          application/json:
            schema:
              type: object
              $ref: "#/components/schemas/User"

      responses:
        "400":
          description: Invalid input
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    delete:
      tags:
        - ユーザ
      summary: ユーザを削除する
      description: delete a pet
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          description: ユーザid
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "400":
          description: Invalid pet value
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /users/{id}/followers:
    get:
      tags:
        - ユーザ
      summary: ユーザのフォロワーリストを取得する
      description: Returns a single pet
      operationId: getFollowers
      parameters:
        - name: id
          in: path
          description: 対象ユーザid
          required: true
          schema:
            type: integer
            format: int64
        - name: myId
          in: query
          description: 自分のユーザid
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      example: Taro
                    imageUrl:
                      type: string
                      example: https://XXXX
                    isFollow:
                      type: boolean
                      example: true
        "400":
          description: Invalid ID supplied
        "404":
          description: Pet not found
      security:
        - api_key: []
        - petstore_auth:
            - write:pets
            - read:pets
  /users/{userId}/follows:
    get:
      tags:
        - ユーザ
      summary: ユーザのフォローリストを取得する
      description: Returns a single pet
      operationId: getFollows
      parameters:
        - name: id
          in: path
          description: 対象ユーザid
          required: true
          schema:
            type: integer
            format: int64
        - name: myId
          in: query
          description: 自分のユーザid
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      example: Taro
                    imageUrl:
                      type: string
                      example: https://XXXX
                    isFollow:
                      type: boolean
                      example: true
        "400":
          description: Invalid ID supplied
        "404":
          description: Pet not found
      security:
        - api_key: []
        - petstore_auth:
            - write:pets
            - read:pets
  /trips:
    get:
      tags:
        - たび
      summary: ユーザの作成・参加しているたびを全て返す
      description: Multiple status values can be provided with comma separated strings
      operationId: findPetsByStatus
      parameters:
        - name: userId
          in: query
          description: Status values that need to be considered for filter
          required: true
          explode: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TripSettings"
        "400":
          description: Invalid status value
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /trips/{tripId}/memos/{memoId}:
    get:
      tags:
        - たび
      summary: たびのメモを取得する
      description: Returns a single pet
      operationId: getPetById
      parameters:
        - name: tripId
          in: path
          description: たびid
          required: true
          schema:
            type: integer
            format: int64
        - name: memoId
          in: path
          description: メモid
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  description:
                    type: string
                    example: メモ
        "400":
          description: Invalid ID supplied
        "404":
          description: Pet not found
      security:
        - api_key: []
        - petstore_auth:
            - write:pets
            - read:pets
  /trips/{tripId}/settings:
    get:
      tags:
        - たび
      summary: たびの基本情報を取得する
      description: Returns a single pet
      operationId: getPetById
      parameters:
        - name: tripId
          in: path
          description: たびid
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/TripSettings"
        "400":
          description: Invalid ID supplied
        "404":
          description: Pet not found
      security:
        - api_key: []
        - petstore_auth:
            - write:pets
            - read:pets
    post:
      tags:
        - たび
      summary: たびの基本情報を更新する
      description: ""
      operationId: updatePetWithForm
      parameters:
        - name: tripId
          in: path
          description: たびid
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: success
        content:
          application/json:
            type: object
            $ref: "#/components/schemas/TripSettings"
      responses:
        "400":
          description: Invalid input
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    put:
      tags:
        - たび
      summary: たびの基本情報を更新する
      description: ""
      operationId: updatePetWithForm
      parameters:
        - name: tripId
          in: path
          description: たびid
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: success
        content:
          application/json:
            type: object
            $ref: "#/components/schemas/TripSettings"
      responses:
        "400":
          description: Invalid input
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /trips/{tripId}/plans:
    get:
      tags:
        - たび
      summary: たびの計画を取得する
      description: Returns a single pet
      operationId: getPetById
      parameters:
        - name: tripId
          in: path
          description: たびid
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TripPlans"
        "400":
          description: Invalid ID supplied
        "404":
          description: Pet not found
      security:
        - api_key: []
        - petstore_auth:
            - write:pets
            - read:pets
    put:
      tags:
        - たび
      summary: たびの計画を更新する
      description: ""
      operationId: updatePetWithForm
      parameters:
        - name: tripId
          in: path
          description: たびid
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: success
        content:
          application/json:
            type: object
            $ref: "#/components/schemas/TripPlans"
      responses:
        "400":
          description: Invalid input
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /trips/{tripId}:
    delete:
      tags:
        - たび
      summary: たびの計画を削除する
      description: delete a pet
      operationId: deletePet
      parameters:
        - name: tripId
          in: path
          description: たびid
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "400":
          description: Invalid pet value
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /templates:
    get:
      tags:
        - テンプレート
      summary: ユーザのテンプレートを全て返す
      description: Multiple status values can be provided with comma separated strings
      operationId: findPetsByStatus
      parameters:
        - name: templateId
          in: query
          description: テンプレートid
          required: true
          explode: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  $ref: "#/components/schemas/TemplateOverview"
        "400":
          description: Invalid status value
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /templates/{templateId}:
    get:
      tags:
        - テンプレート
      summary: テンプレートの情報を取得する
      description: Returns a single pet
      operationId: getPetById
      parameters:
        - name: templateId
          in: path
          description: テンプレートid
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/Template"
        "400":
          description: Invalid ID supplied
        "404":
          description: Pet not found
      security:
        - api_key: []
        - petstore_auth:
            - write:pets
            - read:pets
    post:
      tags:
        - テンプレート
      summary: テンプレートを作成する
      description: ""
      operationId: updatePetWithForm
      parameters:
        - name: templateId
          in: path
          description: テンプレートid
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: success
        content:
          application/json:
            type: object
            $ref: "#/components/schemas/Template"
      responses:
        "400":
          description: Invalid input
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    put:
      tags:
        - テンプレート
      summary: テンプレートを更新する
      description: ""
      operationId: updatePetWithForm
      parameters:
        - name: templateId
          in: path
          description: テンプレートid
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: success
        content:
          application/json:
            type: object
            $ref: "#/components/schemas/Template"
      responses:
        "400":
          description: Invalid input
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    delete:
      tags:
        - テンプレート
      summary: テンプレートを削除する
      description: delete a pet
      operationId: deletePet
      parameters:
        - name: templateId
          in: path
          description: テンプレートid
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "400":
          description: Invalid pet value
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /tags:
    get:
      tags:
        - タグ
      summary: タグを全て取得する
      description: Multiple status values can be provided with comma separated strings
      operationId: getTags
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 1
                    label:
                      type: string
                      example: 北海道
        "400":
          description: Invalid status value
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /tags/{id}:
    get:
      tags:
        - タグ
      summary: 特定のタグを持つテンプレートを取得する
      description: Multiple status values can be provided with comma separated strings
      operationId: getTemplatesByTag
      parameters:
        - name: id
          in: query
          description: タグid
          required: true
          explode: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Template"
        "400":
          description: Invalid status value
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /explore:
    get:
      tags:
        - みんなのたび
      summary: みんなのたびを表示する
      description: Multiple status values can be provided with comma separated strings
      operationId: getAllTemplates
      parameters:
        - name: tag
          in: query
          description: Status values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Pet"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Pet"
        "400":
          description: Invalid status value
      security:
        - petstore_auth:
            - write:pets
            - read:pets
components:
  schemas:
    Me:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        userId:
          type: string
        name:
          type: string
          example: Taro
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        userId:
          type: string
        name:
          type: string
          example: Taro
        description:
          type: string
          example: はじめまして
        followersCount:
          type: integer
          format: int64
          example: 3
        followsCount:
          type: integer
          format: int64
          example: 5
        instagramId:
          type: string
        xId:
          type: string
          example: Taro0000
        imageUrl:
          type: string
          example: https://XXXX
    TripSettings:
      type: object
      properties:
        title:
          type: string
          example: 私の旅
        thumbnailUrl:
          type: string
          example: https://XXXX
        startDate:
          type: string
          example: 2024/12/2
        endDate:
          type: string
          example: 2024/12/4
    TripPlans:
      type: object
      properties:
        dayNum:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
                example: map
              contents:
                type: object
                properties:
                  position:
                    type: integer
                    example: 1
                  name:
                    type: string
                    example: 和歌山大学前駅
                  url:
                    type: string
                    example: https://XXXX
                  time:
                    type: string
                    example: AM7:00
                  note:
                    type: string
                    example: メモ
                  is_secret:
                    type: boolean
                    example: false
    TemplateOverview:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: わたしのたび
        duration:
          type: string
          example: 1泊2日
        imageUrl:
          type: string
          example: https://XXXX
    Template:
      type: object
      properties:
        id:
          type: integer
          example: 1
        description:
          type: string
          example: テンプレートの説明
        imageUrl:
          type: string
          example: https://XXXX
        tags:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                example: 1
              label:
                type: string
                example: 北海道
        days:
          type: object
          properties:
            dayNum:
              type: array
              items:
                type: object
                properties:
                  day:
                    type: integer
                    example: 2
                  description:
                    type: string
                    example: 2日目の概要
                  imageUrl:
                    type: string
                    example: https://XXXX
                  plan:
                    type: array
                    items:
                      type: object
                      properties:
                        type:
                          type: string
                          example: map
                        contents:
                          type: object
                          properties:
                            position:
                              type: integer
                              example: 1
                            name:
                              type: string
                              example: 和歌山大学前駅
                            url:
                              type: string
                              example: https://XXXX
                            time:
                              type: string
                              example: AM7:00
                            note:
                              type: string
                              example: メモ
                            is_secret:
                              type: boolean
                              example: false
        userInfo:
          type: object
          properties:
            userId:
              type: string
              example: tar0
            name:
              type: string
              example: Taro
            followCount:
              type: integer
              example: 2
            followersCount:
              type: integer
              example: 5
            imageUrl:
              type: string
              example: https://XXXX
            isFollow:
              type: boolean
              example: false
        isPublic:
          type: boolean
          example: true





    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: "##default"
  requestBodies:
    Pet:
      description: Pet object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Pet"
        application/xml:
          schema:
            $ref: "#/components/schemas/Pet"
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/User"
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header
